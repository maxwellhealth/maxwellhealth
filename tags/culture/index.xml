<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>culture on Maxwell Health</title>
    <link>https://engineering.maxwellhealth.com/tags/culture/</link>
    <description>Recent content in culture on Maxwell Health</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Nov 2019 00:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://engineering.maxwellhealth.com/tags/culture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Evolving our Interview Process</title>
      <link>https://engineering.maxwellhealth.com/posts/evolving-our-interview-process/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 -0400</pubDate>
      
      <guid>https://engineering.maxwellhealth.com/posts/evolving-our-interview-process/</guid>
      <description>When I joined Maxwell Health in 2014, I was interviewed by our entire product team: a co-founder, our 2 engineers, and our designer. Even as our team grew to ~10 engineers, we all participated in every engineer interview. This was important to us because we had one scrum team, so we’d all be working directly with a new colleague.
Eventually, our engineering team grew large enough that it became impossible to have everyone interview a candidate.</description>
    </item>
    
    <item>
      <title>Continuously Delivering at Maxwell Health</title>
      <link>https://engineering.maxwellhealth.com/posts/continuously-deliverying-at-maxwell-health/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 -0400</pubDate>
      
      <guid>https://engineering.maxwellhealth.com/posts/continuously-deliverying-at-maxwell-health/</guid>
      <description>When I read Jez Humble’s book Continuous Delivery a few years ago, I felt like I was being watched. I thought Jez had been monitoring us and watching us struggle with deployments. In 2015, Maxwell Health released once a week. It was a coordinated affair and rife with what we discovered were anti-patterns. We would deploy off-hours, we coordinated deployments between teams, and each environment had its own build. If things went wrong, we would try to fix forward.</description>
    </item>
    
  </channel>
</rss>